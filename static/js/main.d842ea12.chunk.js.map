{"version":3,"sources":["TodoItem/todoItem.js","TodoList/todoList.js","AddTodo/addTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","toggleTodo","props","updateTodoFn","todo","this","className","completed","onClick","text","React","Component","TodoList","updateTodo","todos","map","_todo","_index","key","AddTodo","updateInput","e","setState","target","value","submitTodo","preventDefault","addTodoFn","state","document","getElementById","id","onSubmit","autoComplete","onChange","type","placeholder","App","componentDidMount","localStorage","getItem","savedTodos","JSON","parse","console","log","addTodo","a","async","setItem","stringify","newTodos","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAmBeA,G,iNALXC,WAAa,WACT,EAAKC,MAAMC,aAAa,EAAKD,MAAME,O,wEAX7B,IAECA,EAAQC,KAAKH,MAAbE,KAEP,OACI,yBAAKE,UAAW,YAAcF,EAAKG,UAAY,aAAe,IAAKC,QAASH,KAAKJ,YAC7E,2BAAIG,EAAKK,W,GAPFC,IAAMC,YCoBdC,E,2MAJXC,WAAa,SAACT,GACV,EAAKF,MAAMC,aAAaC,I,wEAhBlB,IAAD,OAEEU,EAAST,KAAKH,MAAdY,MACP,OACI,yBAAKR,UAAU,qBAEPQ,EAAMC,KAAI,SAACC,EAAOC,GACd,OACI,kBAAC,EAAD,CAAUd,aAAc,EAAKU,WAAYK,IAAKD,EAAQb,KAAMY,Y,GATjEN,IAAMC,WC6BdQ,E,YA5BX,aAAe,IAAD,8BACV,+CAiBJC,YAAc,SAACC,GACX,EAAKC,SAAS,CAAElB,KAAMiB,EAAEE,OAAOC,SAnBrB,EAqBdC,WAAa,SAACJ,GACVA,EAAEK,iBACF,EAAKxB,MAAMyB,UAAU,EAAKC,MAAMxB,MAChCyB,SAASC,eAAe,gBAAgBN,MAAQ,IAtBhD,EAAKI,MAAQ,CACTxB,KAAM,IAHA,E,sEAQJ,IAAD,OACL,OACI,yBAAKE,UAAU,oBACX,0BAAMyB,GAAG,YAAYC,SAAU,SAACX,GAAD,OAAO,EAAKI,WAAWJ,IAAIY,aAAa,OACnE,2BAAOF,GAAG,eAAeG,SAAU,SAACb,GAAD,OAAO,EAAKD,YAAYC,IAAIc,KAAK,OAAOC,YAAY,eACvF,4BAAQD,KAAK,UAAb,a,GAfEzB,IAAMC,WCwDb0B,G,kBAlDX,aAAc,IAAD,8BACT,+CAcJC,kBAAoB,WAChB,IAAMxB,EAAQyB,aAAaC,QAAQ,SACnC,GAAG1B,EAAO,CACN,IAAM2B,EAAaC,KAAKC,MAAM7B,GAC9B,EAAKQ,SAAS,CAAER,MAAO2B,SAGvBG,QAAQC,IAAI,aAtBP,EA0BbC,QAAU,SAAO1C,GAAP,SAAA2C,EAAAC,OAAA,kEAAAD,EAAA,MACA,EAAKzB,SAAU,CAACR,MAAM,GAAD,mBAAM,EAAKc,MAAMd,OAAjB,CAAwB,CAC/CL,KAAML,EACNG,WAAW,QAHT,OAKNgC,aAAaU,QAAQ,QAASP,KAAKQ,UAAU,EAAKtB,MAAMd,QACxD8B,QAAQC,IAAIN,aAAaC,QAAQ,UAN3B,sCA1BG,EAmCb3B,WAAa,SAAOT,GAAP,eAAA2C,EAAAC,OAAA,uDACHG,EAAW,EAAKvB,MAAMd,MAAMC,KAAI,SAAAC,GAClC,OAAGZ,IAASY,EACD,CACHP,KAAML,EAAKK,KACXF,WAAYH,EAAKG,WAGdS,KARN,WAAA+B,EAAA,MAUH,EAAKzB,SAAS,CAAER,MAAOqC,KAVpB,OAWTZ,aAAaU,QAAQ,QAASP,KAAKQ,UAAU,EAAKtB,MAAMd,QAX/C,sCAjCT,EAAKc,MAAQ,CACTd,MAAO,IAHF,E,sEAOT,OACI,yBAAKR,UAAU,OACX,kBAAC,EAAD,CAASqB,UAAWtB,KAAKyC,UACzB,kBAAC,EAAD,CAAU3C,aAAcE,KAAKQ,WAAYC,MAAOT,KAAKuB,MAAMd,a,GAZzDJ,IAAMC,YCMJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAa7B,SAASC,eAAe,SD6H/C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d842ea12.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass TodoItem extends React.Component {\n    render() {\n\n        const {todo} = this.props;\n\n        return(\n            <div className={'todoItem' + (todo.completed ? ' completed' : '')} onClick={this.toggleTodo}>\n                <p>{todo.text}</p>\n            </div>\n    );\n    }\n    toggleTodo = () => {\n        this.props.updateTodoFn(this.props.todo);\n    }\n}\n\nexport default TodoItem;","import React from 'react';\nimport TodoItem from \"../TodoItem/todoItem\";\n\nclass TodoList extends React.Component {\n    render() {\n\n        const {todos} = this.props;\n        return(\n            <div className='todoListContainer'>\n                {\n                    todos.map((_todo, _index) => {\n                        return(\n                            <TodoItem updateTodoFn={this.updateTodo} key={_index} todo={_todo}></TodoItem>\n                        )\n                    })\n                }\n            </div>\n        );\n    }\n    updateTodo = (todo) => {\n        this.props.updateTodoFn(todo);\n    }\n}\nexport default TodoList;","import React from 'react';\n\nclass AddTodo extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            todo: ''\n        };\n\n    }\n\n    render() {\n        return(\n            <div className='addTodoContainer'>\n                <form id='todo-form' onSubmit={(e) => this.submitTodo(e)} autoComplete=\"off\">\n                    <input id='addTodoInput' onChange={(e) => this.updateInput(e)} type='text' placeholder=\"Enter Text\"></input>\n                    <button type='submit'>Add</button>\n                </form>\n            </div>\n        );\n    }\n    updateInput = (e) => {\n        this.setState({ todo: e.target.value });\n    }\n    submitTodo = (e) => {\n        e.preventDefault();\n        this.props.addTodoFn(this.state.todo);\n        document.getElementById('addTodoInput').value = '';\n    }\n}\n\nexport default AddTodo;","import React from 'react';\nimport TodoList from \"./TodoList/todoList\";\nimport AddTodo from \"./AddTodo/addTodo\";\n\nimport './App.css';\n\nclass App extends React.Component {\n\n    constructor(){\n        super();\n        this.state = {\n            todos: []\n        };\n    }\n    render() {\n        return (\n            <div className='App'>\n                <AddTodo addTodoFn={this.addTodo}></AddTodo>\n                <TodoList updateTodoFn={this.updateTodo} todos={this.state.todos}></TodoList>\n            </div>\n        );\n    }\n\n    componentDidMount = () => {\n        const todos = localStorage.getItem('todos');\n        if(todos) {\n            const savedTodos = JSON.parse(todos);\n            this.setState({ todos: savedTodos});\n        }\n        else {\n            console.log('No todos');\n        }\n\n    }\n    addTodo = async (todo) => {\n        await this.setState( {todos: [...this.state.todos, {\n            text: todo,\n            completed: false\n            }] });\n        localStorage.setItem('todos', JSON.stringify(this.state.todos));\n        console.log(localStorage.getItem('todos'));\n    }\n\n    updateTodo = async (todo) => {\n        const newTodos = this.state.todos.map(_todo => {\n            if(todo === _todo)\n                return {\n                    text: todo.text,\n                    completed: !todo.completed\n                }\n            else\n                return _todo\n        });\n        await this.setState({ todos: newTodos });\n        localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App></App>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}